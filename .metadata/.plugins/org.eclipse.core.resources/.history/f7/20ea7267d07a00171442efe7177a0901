package org.Macro;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import javax.inject.Named;

import org.TRX.bwapi.Facade.GameListener;
import org.TRX.bwapi.Facade.Events.OnUnitCreateEvent;
import org.TRX.bwapi.Facade.Utils.BuildOrder;
import org.TRX.bwapi.Facade.manager.BuildingManager;
import org.TRX.bwapi.Facade.manager.WorkerManager;

import bwapi.Unit;
import bwapi.UnitType;

@Named
public class BasicProductionManager {

	@Inject
	GameListener gameListener;

	@Inject
	WorkerManager workerManager;

	@Inject
	BuildingManager buildingManager;

	private List<BuildOrder> currentOrders;

	@PostConstruct
	private void init() {
		this.currentOrders = new ArrayList<BuildOrder>();
	}

	public void update() {
		this.handelSupply();
		this.handelWorker();
	}

	private void handelSupply() {
		System.out.println(this.getAmountOfOrders(UnitType.Terran_Supply_Depot));

		if (this.getAmountOfOrders(UnitType.Terran_Supply_Depot) < 1) {
			if ((this.gameListener.getSelf().supplyTotal() - this.gameListener.getSelf().supplyUsed() < 8)
					&& this.gameListener.getSelf().minerals() >= 100
					&& this.gameListener.getSelf().supplyUsed() < 400) {
				Unit myUnit = this.workerManager.getFreeWorker();
				this.buildingManager.buildBuilding(UnitType.Terran_Supply_Depot,
						this.gameListener.getSelf().getStartLocation(), myUnit);
				this.currentOrders.add(
						new BuildOrder(gameListener.getGame().getFrameCount(), UnitType.Terran_Supply_Depot, myUnit));
			}
		}
	}

	// Todo muss hier weg der kack
	private void handelWorker() {
		System.out.println("send them to the Sloughterhouse");
		// iterate through my units
		for (Unit myUnit : this.gameListener.getSelf().getUnits()) {

			// if there's enough minerals, train an SCV
			if (myUnit.getType() == UnitType.Terran_Command_Center && myUnit.isIdle()
					&& this.gameListener.getSelf().minerals() >= 50) {
				myUnit.train(UnitType.Terran_SCV);
			}

			// if it's a drone and it's idle, send it to the closest mineral
			// patch
			if (myUnit.getType().isWorker() && myUnit.isIdle()) {
				Unit closestMineral = null;

				// find the closest mineral
				for (Unit neutralUnit : this.gameListener.getGame().neutral().getUnits()) {
					if (neutralUnit.getType().isMineralField()) {
						if (closestMineral == null
								|| myUnit.getDistance(neutralUnit) < myUnit.getDistance(closestMineral)) {
							closestMineral = neutralUnit;
						}
					}
				}

				// if a mineral patch was found, send the drone to gather it
				if (closestMineral != null) {
					myUnit.gather(closestMineral, false);
				}
			}
		}

	}
	
	private void updateOrders(){
		
	}

	private int getAmountOfOrders(UnitType unitType) {
		int result = 0;
		for (BuildOrder order : this.currentOrders) {
			if (order.getUnitType() == unitType) {
				result++;
			}
		}
		return result;
	}

	public boolean onUnitCreate(@Observes OnUnitCreateEvent onUnitCreateEvent) {
		System.out.println("onUnitCreate in BasicProduktionManager");
		if (onUnitCreateEvent.getCreatedUnit().getType().isBuilding() == false) {
			return false;
		}
		for (BuildOrder order : this.currentOrders) {
			if (order.getUnitType().equals(onUnitCreateEvent.getCreatedUnit().getType())) {
				this.currentOrders.remove(order);
				System.out.println("removed Order");
				return true;
			}
		}
		return true;
	}
}
