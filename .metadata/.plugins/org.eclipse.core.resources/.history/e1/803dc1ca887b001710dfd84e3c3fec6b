package org.Macro;

import javax.annotation.PostConstruct;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import javax.inject.Named;

import org.Macro.common.OrderHandler;
import org.TRX.bwapi.Facade.GameListener;
import org.TRX.bwapi.Facade.Events.OnUnitCreateEvent;
import org.TRX.bwapi.Facade.Utils.BuildOrder;
import org.TRX.bwapi.Facade.manager.BuildingManager;
import org.TRX.bwapi.Facade.manager.WorkerManager;

import bwapi.Order;
import bwapi.Unit;
import bwapi.UnitType;

/**
 * Handels all the Macro In Starcraft Macro describes all of baseconstruction
 * handeling upgrades and exansions
 * 
 * @author Turox
 *
 */
@Named
public class BasicMacroManager {

	@Inject
	GameListener gameListener;

	@Inject
	WorkerManager workerManager;

	@Inject
	BuildingManager buildingManager;

	@Inject
	OrderHandler orderHandler;

	@Inject
	ProductionManager productionManager;

	private int lastCheckedOrders;

	@PostConstruct
	private void init() {
		this.lastCheckedOrders = 0;
	}

	public void update() {
		this.workerManager.update();
		this.handelSupply();

		if (this.gameListener.getGame().getFrameCount() >= (this.lastCheckedOrders + 120)) {
			System.out.println(this.getAmountOfOrders(UnitType.Terran_Supply_Depot));
			this.updateOrders();
			this.lastCheckedOrders = this.gameListener.getGame().getFrameCount();
		}
	}

	private void handelSupply() {
		// System.out.println(this.getAmountOfOrders(UnitType.Terran_Supply_Depot));

		if (this.getAmountOfOrders(UnitType.Terran_Supply_Depot) < 1) {
			if ((this.gameListener.getSelf().supplyTotal() - this.gameListener.getSelf().supplyUsed() < 8)
					&& this.gameListener.getSelf().minerals() >= 100
					&& this.gameListener.getSelf().supplyUsed() < 400) {
				Unit myUnit = this.workerManager.getFreeWorker();
				this.buildingManager.buildBuilding(UnitType.Terran_Supply_Depot,
						this.gameListener.getSelf().getStartLocation(), myUnit);
				System.out.println("myUnit: " + myUnit);
				// MyUnit ist null spÃ¤ter irgendwie
				this.orderHandler.addCurrentOrder(
						new BuildOrder(gameListener.getGame().getFrameCount(), UnitType.Terran_Supply_Depot, myUnit));
			}
		}
	}

	/**
	 * Checks if the worker has still the order to build a building, if not the
	 * order will deleted
	 * 
	 */
	private void updateOrders() {
		System.out.println("update buildorders");
		for (BuildOrder order : this.orderHandler.getCurrentOrders()) {
			if (order.getWorker() == null) {
				System.out.println("something went wrong with the worker");
				this.currentOrders.remove(order);
				break;
			}
			if (order.getWorker().getOrder().equals(Order.PlaceBuilding) == false
					&& order.getWorker().isConstructing() == false) {
				this.currentOrders.remove(order);
			}

		}
	}

	private int getAmountOfOrders(UnitType unitType) {
		int result = 0;
		for (BuildOrder order : this.currentOrders) {
			if (order.getUnitType() == unitType) {
				result++;
			}
		}
		return result;
	}

	// gucken wegen boolean ob man dass anders machen kann
	public boolean onUnitCreate(@Observes OnUnitCreateEvent onUnitCreateEvent) {
		System.out.println("onUnitCreate in BasicProduktionManager");
		if (onUnitCreateEvent.getCreatedUnit().getType().isBuilding() == false) {
			return false;
		}
		for (BuildOrder order : this.currentOrders) {
			if (order.getUnitType().equals(onUnitCreateEvent.getCreatedUnit().getType())) {
				this.currentOrders.remove(order);
				System.out.println("removed Order");
				return true;
			}
		}
		return true;
	}
}
